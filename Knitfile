local knit = import("knit")

local chisel = require "build/chisel"

local top = cli.top or "Soc"
local src = knit.rglob("src/main/scala/", "*.scala")
local gen := generated
local prog = cli.prog or "blink"
local mem = f"sw/$prog/$prog.mem"

local build = chisel.build(src, "rtor", top, gen)

local verilator = require "build/verilator"

local verilogCore = f"$gen/Core/*.sv"
local subtests = include("tests/Knitfile")
local test = verilator.tb("tests/tb.cc", verilogCore, "Core", f"$gen/Core [$subtests][tests]hdr")
local sim = verilator.sim("tests/sim.cc", verilogCore, "Core", f"$gen/Core tests/rtor_mem.h")

local arc = require "build/arc"
local arcd = tobool(cli.arcd) or false
local arctest = arc.build("tests/tb-arc.cc", "Core", gen, f"[$subtests][tests]hdr", arcd)

local arc = require "build/arc"
local arcd = tobool(cli.arcd) or false
local arctest = arc.build("tests/tb-arc.cc", "Core", gen, f"[$subtests][tests]hdr", arcd)

local rules = r(
    {
        $ build:V: $gen/$top $gen/rtor.mem
        $ $gen/rtor.mem: sw/$prog/$prog.mem
            cp $input $output
        $ tests/rtor.bin: sw/$prog/$prog.bin
            cp $input $output
    },
    build,
    test,
    sim,
    arctest
)

local verilog = f"$gen/$top/*.sv $gen/$top/generated/*.sv"

local tech = cli.tech or ""
if tech == "orangecrab" then
    local oc = require "build/orangecrab"
    rules = r(rules.Rules, oc.build(
        "tech/orangecrab/orangecrab.lpf",
        {"tech/orangecrab/top.v", "tech/orangecrab/pll.v"},
        top,
        f"$gen/$top/*.sv $gen/$top/generated/*.sv",
        f"$gen/$top $gen/rtor.mem",
        tobool(cli.quiet or true)
    ))
    local clkin = 48
    local clkout = 32
    rules = r(rules.Rules, {
    $ tech/orangecrab/pll.v:
        ecppll --clkin $clkin -o $clkout -f $output
    })
end

local sw = require "build/sw"
local swrules = sw.build(prog)

rules = r(rules.Rules, swrules.Rules)

return rules
